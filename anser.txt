package com.wecp.library.controller;

import com.wecp.library.domain.Book;
import com.wecp.library.domain.User;
import com.wecp.library.repository.BookRepository;
import com.wecp.library.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

/**
 * REST controller for managing library system process
 */
@RestController
@RequestMapping("/api/v1")
public class LibraryController {
    @Autowired
    BookRepository bookRepository;
    @Autowired
    UserRepository userRepository;
 
    /**
     * {@code GET  /book/:id} : get the "id" Book.
     *
     * @param id the id of the book to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body
     * the book, or if does not exist, return with status "noContent".
     */
    @GetMapping("/book/{id}")
    public ResponseEntity<Book> getBook(@PathVariable Long id) {
        Optional<Book> book=bookRepository.findById(id);
        if(book.isPresent()){
            return ResponseEntity.ok().body(book.get());
        }
        else{
            return ResponseEntity.noContent().build();
        }

    }

    /**
     * {@code POST  /book} : Create a new book.
     *
     * @param book the book to create.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the new book
     */
    @PostMapping("/book")
    public ResponseEntity<Book> createBook(@RequestBody Book book) {
        Book savebook=bookRepository.save(book);
        return ResponseEntity.ok().body(savebook);
    }

    @PutMapping("/book/{id}")
    public ResponseEntity<Book> updateBook(@RequestBody Book book,@PathVariable Long id) {
	Optional<Book> optionalBook=bookRepository.findById(id);
	if(optionalBook.isPresent()){
		Book savedBook =optionalBook.get();

		savedBook.setAuthor(book.getAuthor());
		savedBook.setDescription(book.getDescription());
		bookRepository.save(savedBook);
 		return ResponseEntity.ok().body(savedbook);
	}
	else{
		return ResponseEntity.notFound().build();
		//return ResponseEntity.notContent().build();
	}       
    }
  	@DeleteMapping("/book/{id}")
	public ResponseEntity<Void> deleteBook(@PathVariable Long id){
		Optional<Book> optionalBook=bookRepository.findById(id);
		if(optionalBook.isPresent()){
			Book savedBook =optionalBook.get();
			bookRepository.delete(savedBook);
			return ResponseEntity.noContent().build();
		}
		else{
			return ResponseEntity.notFound().build();
		}
	}
}
